y
model
table(predict(model$finalModel,x)$class,y)
df<- read.csv('Data/output_data/result.csv')
names(df)
df<- read.csv('Data/output_data/merged.csv')
names(df)
x<- subset(df,select=-c(1:2,5))
names(x)
x<- subset(df,select=-c(1:2,3,5))
y<- as.factor(df$session)
y
model <- train(x,y,'nb',trControl=trainControl(method='cv',number=10))
model <- train(x,y,'nb',trControl=trainControl(method='cv',number=6))
df$session <- recode(df$session,"1='one")
df$session <- recode(df$session,1='one')
df$session <- recode(df$session,1="one")
install.packages('car')
df$session[df$session == 1] <- 'one'
head(df$session)
df$session[df$session == 2] <- 'two'
df$session[df$session == 3] <- 'three'
df$session[df$session == 4] <- 'four'
df$session[df$session == 5] <- 'five'
df$session[df$session == 6] <- 'six'
x<- subset(df,select=-c(1:2,3,5))
y<- as.factor(df$session)
model <- train(x,y,'nb',trControl=trainControl(method='cv',number=6))
model <- train(x,y,'nb',trControl=trainControl(method='cv',number=6),warning())
model <- trainControl(x,y,'nb',trControl=trainControl(method='cv',number=6))
model <- train(x,y,'nb',trControl=trainControl(method='cv',number=6))
model
model <- train(x,y,'nb',trControl=trainControl(method='cv',number=10),allowParralel =TRUE)
df<- read.csv('Data/output_data/merged.csv',na.rm =TRUE)
na.omit(df)
df<-na.omit(df)
x<- subset(df,select=-c(1:2,3,5))
y<- as.factor(df$session)
## train your model ##
model <- train(x,y,'nb',trControl=trainControl(method='cv',number=10))
model
df$session[df$session == 1] <- 'one'
df$session[df$session == 2] <- 'two'
df$session[df$session == 3] <- 'three'
df$session[df$session == 4] <- 'four'
df$session[df$session == 5] <- 'five'
df$session[df$session == 6] <- 'six'
x<- subset(df,select=-c(1:2,3,5))
y<- as.factor(df$session)
## train your model ##
model <- train(x,y,'nb',trControl=trainControl(method='cv',number=10))
model
df<- read.csv(('Data/output_data/sessions.csv'))
head(df)
names(df)
df<-na.omit(df)
x<-subset(df,select=-(1:7))
y<-as.factor(df$activity)
## train your model ##
model <- train(x,y,'nb',trControl=trainControl(method='cv',number=10))
model
sub<-sample(nrow(df),floor(nrow(df)*0.9))
sub<-sample(nrow(df),floor(nrow(df)*0.5))
df<-na.omit(df)
sub<-sample(nrow(df),floor(nrow(df)*0.5))
train<- df[sub,]
test<- df[-sub,]
xTrain<-subset(train,select=-(1:7))
yTrain<-as.factor(train$activity)
model <- train(xTrain,yTrain,'nb',trControl=trainControl(method='cv',number=1))
df<- read.csv(('Data/output_data/sessions.csv'))
df<-na.omit(df)
sub<-sample(nrow(df),floor(nrow(df)*0.5))
train<- df[sub,]
test<- df[-sub,]
xTrain<-subset(train,select=-(1:7))
yTrain<-as.factor(train$activity)
yTrain
length(yTrain)
model <- train(xTrain,yTrain,'nb',trControl=trainControl(method='cv',number=1))
model <- train(xTrain,yTrain,'nb',trControl=trainControl(method='cv',number=2))
model <- train(x,y,'nb',trControl=trainControl(method='cv',number=2))
df<- read.csv(('Data/output_data/sessions.csv'))
df<-na.omit(df)
sub<-sample(nrow(df),floor(nrow(df)*0.5))
train<- df[sub,]
test<- df[-sub,]
names(df)
xTrain<-subset(train,select=-c(1:7))
yTrain<-as.factor(train$activity)
model <- train(xTrain,yTrain,'nb',trControl=trainControl(method='cv',number=2))
names(xTrain)
names(df)
xTrain<-subset(train,select=-c(1:7))
df<- read.csv(('Data/output_data/sessions.csv'))
df<-na.omit(df)
sub<-sample(nrow(df),floor(nrow(df)*0.5))
train<- df[sub,]
test<- df[-sub,]
xTrain<-subset(train,select=-c(1:7))
yTrain<-as.factor(train$session)
## train your model ##
model <- train(xTrain,yTrain,'nb',trControl=trainControl(method='cv',number=2))
df<- read.csv(('Data/output_data/sessions.csv'))
df<-na.omit(df)
sub<-sample(nrow(df),floor(nrow(df)*0.1))
train<- df[sub,]
test<- df[-sub,]
xTrain<-subset(train,select=-c(1:7))
yTrain<-as.factor(train$session)
## train your model ##
model <- train(xTrain,yTrain,'nb',trControl=trainControl(method='cv',number=2))
df<-na.omit(df)
sub<-sample(nrow(df),floor(nrow(df)*0.01))
train<- df[sub,]
test<- df[-sub,]
xTrain<-subset(train,select=-c(1:7))
yTrain<-as.factor(train$session)
## train your model ##
model <- train(xTrain,yTrain,'nb',trControl=trainControl(method='cv',number=2))
model
model <- train(xTrain,yTrain,'nb',trControl=trainControl(method='cv',number=10))
model
df<- read.csv('Data/output_data/merged.csv')
df<-na.omit(df)
df$session[df$session == 1] <- 'one'
df$session[df$session == 2] <- 'two'
df$session[df$session == 3] <- 'three'
df$session[df$session == 4] <- 'four'
df$session[df$session == 5] <- 'five'
df$session[df$session == 6] <- 'six'
sub<-sample(nrow(df),floor(nrow(df)*0.01))
sub<-sample(nrow(df),floor(nrow(df)*0.9))
train<- df[sub,]
test<- df[-sub,]
xTrain<- subset(df,select=-c(1:2,3,5))
yTrain<- as.factor(df$session)
model <- train(xTrain,yTrain,'nb',trControl=trainControl(method='cv',number=10))
model
xTrain<- subset(train,select=-c(1:2,3,5))
yTrain<- as.factor(train$session)
model <- train(xTrain,yTrain,'nb',trControl=trainControl(method='cv',number=10))
model
xTest<- subset(test,select=-c(1:2,3,5))
yTest<- as.factor(test$session)
prop.table(table(predict(model$finalModel,xTest)$class,yTest))
fit <- rpart(total ~ ., df)
fit <- rpart(session ~ ., df)
summary(fit)
tr = tree(fit, data=df)
summary(tr)
plot(tr); text(tr)
fit <- rpart(session ~ ., df)
fit
tr = tree(fit, data=df)
str(df)
df<- read.csv('Data/output_data/merged.csv')
df<-na.omit(df)
df$session[df$session == 1] <- 'one'
df$session[df$session == 2] <- 'two'
df$session[df$session == 3] <- 'three'
df$session[df$session == 4] <- 'four'
df$session[df$session == 5] <- 'five'
df$session[df$session == 6] <- 'six'
df$session<-as.factor(df$session)
fit <- rpart(session ~ ., df)
summary(fit)
## plot decision tree ##
tr = tree(fit, data=df)
summary(tr)
plot(tr); text(tr)
names(df)
xTrain<- subset(train,select=-c(1:5))
yTrain<- as.factor(train$session)
xTest<- subset(test,select=-c(1:5))
yTest<- as.factor(test$session)
## train your model ##
model <- train(xTrain,yTrain,'nb',trControl=trainControl(method='cv',number=10))
model
prop.table(table(predict(model$finalModel,xTest)$class,yTest))
names(df)
df<-subset(df,select=-c(1,2,4,5))
fit <- rpart(session ~ ., df)
summary(fit)
## plot decision tree ##
tr = tree(fit, data=df)
summary(tr)
plot(tr); text(tr)
df<-subset(df,select=-c(1,2,4,5))
df<- read.csv('Data/output_data/merged.csv')
df<-subset(df,select=-c(1,2,4,5))
df<-na.omit(df)
df$session[df$session == 1] <- 'one'
df$session[df$session == 2] <- 'two'
df$session[df$session == 3] <- 'three'
df$session[df$session == 4] <- 'four'
df$session[df$session == 5] <- 'five'
df$session[df$session == 6] <- 'six'
df$session<-as.factor(df$session)
names(df)
df$session<-as.factor(df$session)
sub<-sample(nrow(df),floor(nrow(df)*0.9))
train<- df[sub,]
test<- df[-sub,]
xTrain<- subset(train,select=-c(session))
yTrain<- as.factor(train$session)
xTest<- subset(test,select=-c(session))
yTest<- as.factor(test$session)
## train your model ##
model <- train(xTrain,yTrain,'nb',trControl=trainControl(method='cv',number=10))
prop.table(table(predict(model$finalModel,xTest)$class,yTest))
model
names(df)
df<- read.csv('Data/output_data/merged.csv') # use the merged data/ be sure to change to the relevant path
df<-subset(df,select=-c(1,2,4,5,9))
df<-na.omit(df) # omit na's from the file
df$session[df$session == 1] <- 'one' # ugly way of doing this/ also not necessary
df$session[df$session == 2] <- 'two'
df$session[df$session == 3] <- 'three'
df$session[df$session == 4] <- 'four'
df$session[df$session == 5] <- 'five'
df$session[df$session == 6] <- 'six'
df$session<-as.factor(df$session) # make sure that you factorize the target
sub<-sample(nrow(df),floor(nrow(df)*0.9)) # training data is 90% of all data (random rows)
train<- df[sub,] # define training data from the sub
test<- df[-sub,] # define the testing data from the rest
xTrain<- subset(train,select=-c(session)) # inputs
yTrain<- as.factor(train$session) # targets
xTest<- subset(test,select=-c(session))
yTest<- as.factor(test$session)
model <- train(xTrain,yTrain,'nb',trControl=trainControl(method='cv',number=10))
prop.table(table(predict(model$finalModel,xTest)$class,yTest))
model
df<- read.csv('Data/output_data/merged.csv') # use the merged data/ be sure to change to the relevant path
df<-subset(df,select=-c(1,2,4,5)) # take out the dumb columns/ the columns that are not independent of the target
#df<-subset(df,select=-c(1,2,4,5,9)) # subset out time_delta feature
df<-na.omit(df) # omit na's from the file
df$session[df$session == 1] <- 'one' # ugly way of doing this/ also not necessary
df$session[df$session == 2] <- 'two'
df$session[df$session == 3] <- 'three'
df$session[df$session == 4] <- 'four'
df$session[df$session == 5] <- 'five'
df$session[df$session == 6] <- 'six'
df$session<-as.factor(df$session) # make sure that you factorize the target
#################
## NAIVE BAYES ##
#################
#***************#
######################################
## define training and testing sets ##
######################################
sub<-sample(nrow(df),floor(nrow(df)*0.9)) # training data is 90% of all data (random rows)
train<- df[sub,] # define training data from the sub
test<- df[-sub,] # define the testing data from the rest
xTrain<- subset(train,select=-c(session)) # inputs
yTrain<- as.factor(train$session) # targets
xTest<- subset(test,select=-c(session))
yTest<- as.factor(test$session)
######################
## train your model ##
######################
model <- train(xTrain,yTrain,'nb',trControl=trainControl(method='cv',number=10))
names(df)
ggplot(df, aes(factor(session),idle_time))
ggplot(df, aes(factor(session),idle_time)) + geom_boxplot()
ylim1 = boxplot.stats(df$session)$stats[c(1, 5)]
ylim1 = boxplot.stats(df$idle_time)$stats[c(1, 5)]
ggplot(df, aes(factor(session),idle_time)) + geom_boxplot() + coord_cartesian(ylim = ylim1*1.05)
ggplot(df, aes(factor(session),idle_time)) + geom_boxplot() + coord_cartesian(ylim = ylim1*3)
install.packages('reshape2')
install.packages("reshape2")
install.packages("reshape2")
install.packages("reshape2")
library('reshape2')
library(reshape2)
df<- read.csv('Data/output_data/merged.csv') # use the merged data/ be sure to change to the relevant path
df<-subset(df,select=-c(1,2,4,5)) # take out the dumb columns/ the columns that are not independent of the target
#df<-subset(df,select=-c(1,2,4,5,9)) # subset out time_delta feature
df<-na.omit(df) # omit na's from the file
df$session[df$session == 1] <- 'one' # ugly way of doing this/ also not necessary
df$session[df$session == 2] <- 'two'
df$session[df$session == 3] <- 'three'
df$session[df$session == 4] <- 'four'
df$session[df$session == 5] <- 'five'
df$session[df$session == 6] <- 'six'
df$session<-as.factor(df$session) # make sure that you factorize the target
names(df)
dat.m <- melt(df,id.vars='session', measure.vars=c('idle_time','mouse_movement','right_click'))
ggplot(dat.m) + geom_boxplot(aes(x=session, y=value, color = variable))
library(rpart)
library(tree)
library(party)
library(klaR)
library(caret)
library(reshape2)
ggplot(dat.m) + geom_boxplot(aes(x=session, y=value, color = variable))
ggplot(dat.m) + geom_boxplot(aes(x=session, y=variable, color = session))
ggplot(dat.m) + geom_boxplot(aes(x=variable, y=session, color = session))
ggplot(dat.m) + geom_boxplot(aes(x=variable, y=value, color = session))
ggplot(dat.m) + geom_boxplot(aes(x=variable, y=value, color = session)) + coord_cartesian(ylim = ylim1*3)
ggplot(dat.m) + geom_boxplot(aes(x=variable, y=value, color = session)) #+ coord_cartesian(ylim = ylim1*3)
which(grep(>-50000),df$idle_time)
df[df$idle_time < -50000]
df[df$idle_time < 5]
df[df$idle_time < 5000,]
df[-df$idle_time < 5000,]
df<- read.csv('Data/output_data/merged.csv') # use the merged data/ be sure to change to the relevant path
df<- read.csv('Data/output_data/merged.csv') # use the merged data/ be sure to change to the relevant path
df[-df$idle_time < 5000,]
df[df$idle_time < 5000,]
df<- read.csv('Data/output_data/merged.csv') # use the merged data/ be sure to change to the relevant path
df<-subset(df,select=-c(1,2,4,5)) # take out the dumb columns/ the columns that are not independent of the target
#df<-subset(df,select=-c(1,2,4,5,9)) # subset out time_delta feature
df<-na.omit(df) # omit na's from the file
df[-df$idle_time < 5000,]
df[df$idle_time < 5000,]
df<-df[-df$idle_time < 5000,] # remove an extreme outlier in idle time
df$session[df$session == 1] <- 'one' # ugly way of doing this/ also not necessary
df$session[df$session == 2] <- 'two'
df$session[df$session == 3] <- 'three'
df$session[df$session == 4] <- 'four'
df$session[df$session == 5] <- 'five'
df$session[df$session == 6] <- 'six'
df$session<-as.factor(df$session) # make sure that you factorize the target
sub<-sample(nrow(df),floor(nrow(df)*0.9)) # training data is 90% of all data (random rows)
train<- df[sub,] # define training data from the sub
test<- df[-sub,] # define the testing data from the rest
xTrain<- subset(train,select=-c(session)) # inputs
yTrain<- as.factor(train$session) # targets
xTest<- subset(test,select=-c(session))
yTest<- as.factor(test$session)
######################
## train your model ##
######################
model <- train(xTrain,yTrain,'nb',trControl=trainControl(method='cv',number=10))
model
prop.table(table(predict(model$finalModel,xTest)$class,yTest))
df<- read.csv('Data/output_data/merged.csv') # use the merged data/ be sure to change to the relevant path
df<-subset(df,select=-c(1,2,4,5)) # take out the dumb columns/ the columns that are not independent of the target
#df<-subset(df,select=-c(1,2,4,5,9)) # subset out time_delta feature
df<-na.omit(df) # omit na's from the file
df<-df[-df$idle_time < 5000,] # remove an extreme outlier in idle time
df$session<-as.factor(df$session) # make sure that you factorize the target
dat.m <- melt(df,id.vars='session', measure.vars=c('idle_time','mouse_movement','right_click'))
ggplot(dat.m) + geom_boxplot(aes(x=variable, y=value, color = session)) #+ coord_cartesian(ylim = ylim1*3)
dat.m <- melt(df,id.vars='session', measure.vars=c('mouse_movement','right_click'))
ylim1 = boxplot.stats(df$idle_time)$stats[c(1, 5)]
ggplot(dat.m) + geom_boxplot(aes(x=variable, y=value, color = session)) #+ coord_cartesian(ylim = ylim1*3)
p1<- ggplot(df, aes(factor(session),idle_time)) + geom_boxplot()
p2<- ggplot(df, aes(factor(session),right_click)) + geom_boxplot()
p3<- ggplot(df, aes(factor(session),left_click)) + geom_boxplot()
multiplot(p1, p2, p3, cols=3)
require(grid)
multiplot(p1, p2, p3, cols=3)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(p1, p2, p3, cols=3)
p1<- ggplot(df, aes(factor(session),idle_time, colour = session)) + geom_boxplot()
p2<- ggplot(df, aes(factor(session),right_click)) + geom_boxplot()
p3<- ggplot(df, aes(factor(session),left_click)) + geom_boxplot()
multiplot(p1, p2, p3, cols=3)
p1<- ggplot(df, aes(factor(session),idle_time, colour = session)) + geom_boxplot() +guides(fill=FALSE)
p2<- ggplot(df, aes(factor(session),right_click)) + geom_boxplot()
p3<- ggplot(df, aes(factor(session),left_click)) + geom_boxplot()
multiplot(p1, p2, p3, cols=3)
p1<- ggplot(df, aes(factor(session),idle_time, colour = session)) + geom_boxplot() + theme(legend.position="none")
p2<- ggplot(df, aes(factor(session),right_click)) + geom_boxplot()
p3<- ggplot(df, aes(factor(session),left_click)) + geom_boxplot()
multiplot(p1, p2, p3, cols=3)
p1<- ggplot(df, aes(factor(session),idle_time, colour = session)) + geom_boxplot() + theme(legend.position="none")
p2<- ggplot(df, aes(factor(session),right_click, colour = session)) + geom_boxplot() + theme(legend.position="none")
p3<- ggplot(df, aes(factor(session),left_click, colour = session)) + geom_boxplot() + theme(legend.position="none")
multiplot(p1, p2, p3, cols=3)
names(df)
p1<- ggplot(df, aes(factor(session),idle_time, colour = session)) + geom_boxplot() + theme(legend.position="none")
p2<- ggplot(df, aes(factor(session),right_click, colour = session)) + geom_boxplot() + theme(legend.position="none")
p3<- ggplot(df, aes(factor(session),left_click, colour = session)) + geom_boxplot() + theme(legend.position="none")
p4<- ggplot(df, aes(factor(session),mouse_wheel, colour = session)) + geom_boxplot() + theme(legend.position="none")
p5<- ggplot(df, aes(factor(session),mouse_movement, colour = session)) + geom_boxplot() + theme(legend.position="none")
p6<- ggplot(df, aes(factor(session),keystroke, colour = session)) + geom_boxplot() + theme(legend.position="none")
p7<- ggplot(df, aes(factor(session),time_delta, colour = session)) + geom_boxplot() + theme(legend.position="none")
multiplot(p1, p2, p3,p4,p5,p6,p7, cols=7)
p7 + ylab("")
p7 + labs(title = "time", x = "session", y = "")
p1<- ggplot(df, aes(factor(session),idle_time, colour = session)) +
geom_boxplot() + theme(legend.position="none") +
labs(title = "idle time", x = "session", y = "")
p2<- ggplot(df, aes(factor(session),right_click, colour = session)) +
geom_boxplot() + theme(legend.position="none") +
labs(title = "right click", x = "session", y = "")
p3<- ggplot(df, aes(factor(session),left_click, colour = session)) +
geom_boxplot() + theme(legend.position="none") +
labs(title = "left click", x = "session", y = "")
p4<- ggplot(df, aes(factor(session),mouse_wheel, colour = session)) +
geom_boxplot() + theme(legend.position="none") +
labs(title = "mouse wheel", x = "session", y = "")
p5<- ggplot(df, aes(factor(session),mouse_movement, colour = session)) +
geom_boxplot() + theme(legend.position="none") +
labs(title = "mouse movement", x = "session", y = "")
p6<- ggplot(df, aes(factor(session),keystroke, colour = session)) +
geom_boxplot() + theme(legend.position="none") +
labs(title = "keystroke", x = "session", y = "")
p7<- ggplot(df, aes(factor(session),time_delta, colour = session)) +
geom_boxplot() + theme(legend.position="none") +
labs(title = "time", x = "session", y = "")
multiplot(p1, p2, p3,p4,p5,p6,p7, cols=7)
ggplot(df, aes(factor(session),idle_time, colour = session)) + geom_density()
ggplot(df, aes(idle_time, colour = session)) + geom_density()
ggplot(df, aes(idle_time, colour = session)) + geom_histogram()
ggplot(df, aes(time_delta,idle_time, colour = session)) + geom_point()
ggplot(df, aes(time_delta,idle_time, colour = session)) + geom_point() + geom_jitter()
ggplot(df, aes(time_delta,idle_time, colour = session)) + geom_point() + geom_density2d()
ggplot(df, aes(time_delta,idle_time, colour = session)) + geom_density2d()
ggplot(df, aes(time_delta,idle_time, colour = session)) + geom_density2d() + facet_wrap(~session)
ggplot(df, aes(time_delta,keystroke, colour = session)) + geom_density2d() + facet_wrap(~session)
ggplot(df, aes(time_delta,keystroke, colour = session)) +geom_point() + geom_density2d() + facet_wrap(~session)
ggplot(df, aes(time_delta,keystroke, colour = session)) +geom_point(aes(colour = idle_time)) + geom_density2d() + facet_wrap(~session)
ggplot(df, aes(time_delta,keystroke, colour = session)) +geom_point() + geom_density2d() + facet_wrap(~session)
p1<- ggplot(df, aes(factor(session),idle_time, colour = session))
p2<- ggplot(df, aes(factor(session),right_click, colour = session))
p3<- ggplot(df, aes(factor(session),left_click, colour = session))
p4<- ggplot(df, aes(factor(session),mouse_wheel, colour = session))
p5<- ggplot(df, aes(factor(session),mouse_movement, colour = session))
p6<- ggplot(df, aes(factor(session),keystroke, colour = session))
p7<- ggplot(df, aes(factor(session),time_delta, colour = session))
p1 + geom_boxplot() + theme(legend.position="none") +
labs(title = "idle time", x = "session", y = "")
p2 + geom_boxplot() + theme(legend.position="none") +
labs(title = "right click", x = "session", y = "")
p3 + geom_boxplot() + theme(legend.position="none") +
labs(title = "left click", x = "session", y = "")
p4 + geom_boxplot() + theme(legend.position="none") +
labs(title = "mouse wheel", x = "session", y = "")
p5 + geom_boxplot() + theme(legend.position="none") +
labs(title = "mouse movement", x = "session", y = "")
p6 + geom_boxplot() + theme(legend.position="none") +
labs(title = "keystroke", x = "session", y = "")
p7 + geom_boxplot() + theme(legend.position="none") +
labs(title = "time", x = "session", y = "")
p8<- ggplot(df, aes(time_delta,keystroke, colour = session))
p8 + geom_point() + geom_density2d() + facet_wrap(~session)
names(df)
p8<- ggplot(df, aes(time_delta,keystroke, colour = session))
p9<- ggplot(df, aes(time_delta,idle_time, colour = session))
p10<- ggplot(df, aes(time_delta,mouse_wheel, colour = session))
p12<- ggplot(df, aes(time_delta,left_click, colour = session))
p13<- ggplot(df, aes(time_delta,right_click, colour = session))
p14<- ggplot(df, aes(time_delta,mouse_movement, colour = session))
p8 + geom_point() + geom_density2d() + facet_wrap(~session)
p9 + geom_point() + geom_density2d() + facet_wrap(~session)
p10 + geom_point() + geom_density2d() + facet_wrap(~session)
p11 + geom_point() + geom_density2d() + facet_wrap(~session)
p11<- ggplot(df, aes(time_delta,left_click, colour = session))
p12<- ggplot(df, aes(time_delta,right_click, colour = session))
p13<- ggplot(df, aes(time_delta,mouse_movement, colour = session))
p11 + geom_point() + geom_density2d() + facet_wrap(~session)
p12 + geom_point() + geom_density2d() + facet_wrap(~session)
p13 + geom_point() + geom_density2d() + facet_wrap(~session)
p13 + geom_point() + geom_density() + facet_wrap(~session)
p13 + geom_point() + geom_bin2d() + facet_wrap(~session)
p13 + geom_bin2d() + facet_wrap(~session)
df2 <- read.csv('Data/output_data/final_grades.csv')
names(df2)
df2 <- subset(df2, select = -X ) # clean up residual index rows
df2 <- na.omit(df2)
mround <- function(x,base){
base*round(x/base)
}
df2 <- read.csv('Data/output_data/final_grades.csv')
df2 <- subset(df2, select = -X ) # clean up residual index rows
df2 <- na.omit(df2)
x <- subset(df2, select = -total) # define training set
y <- as.factor(mround(df2$total,5))
y
model <- train(x,y,'nb',trControl=trainControl(method='cv',number=10))
x <- subset(df2, select = -total) # define training set
y <- as.factor(mround(df2$total,5))
## train your model ##
model <- train(x,y,'nb',trControl=trainControl(method='cv',number=10))
y <- as.factor(mround(df2$total,10))
## train your model ##
model <- train(x,y,'nb',trControl=trainControl(method='cv',number=10))
model
predict(model$finalModel,x)
predict(model$finalModel,x)$class
table(predict(model$finalModel,x)$class,y)
