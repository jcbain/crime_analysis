title(main='fat_perc')
p <- ggplot(x, aes(age2, fat))
p + geom_point()
p + geom_point() + xlab('age') + ylab('fat_perc')
p + geom_point() + xlab('age') + ylab('fat_perc') +ggtitle('scatter')
qqline(x$age2,x$fat)
qqplot(x$age2,x$fat,xlab = 'age', ylab= 'fat_perc',title(main='Quantile Quantile Plot'))
qqplot(x$age2,x$fat,xlab = 'age', ylab= 'fat_perc',title(main='Quantile Quantile Plot'))
x<-data.frame(x)
qqplot(x$age2,x$fat,xlab = 'age', ylab= 'fat_perc',title(main='Quantile Quantile Plot'))
qqplot(x$age2,x$fat,xlab = 'age', ylab= 'fat_perc')
title(main='quantile quantile plot')
zscore_age<- scale(x$age2, center = TRUE, scale = TRUE)
zscore_age
cbind(zscore_age,zscore_fat)
cor(x$age2,x$fat)
gulf <- c(1500,6800,1700)
parfreq<- gulf/sum(gulf)
parfreq
p<-parfreq[1]
p<-parfreq[1]+(.5*parfreq[2])
q<-parfreq[3]+(.5*parfreq[2])
p^2
2*p*q
q^2
p2<-p^2
pq2<-2*p*q
q2<-q^2
expected<-(p2,pq2,p2)
expected<-c(p2,pq2,p2)
ecount<-expect*sum(gulf)
ecount<-expected*sum(gulf)
((gulf-ecount)^2)/ecount
sum(val)
val<-((gulf-ecount)^2)/ecount
sum(val)
gulf <- c(1500,6800,1700)
parfreq<- gulf/sum(gulf)
parfreq
p<-parfreq[1]+(.5*parfreq[2])
q<-parfreq[3]+(.5*parfreq[2])
p2<-p^2
pq2<-2*p*q
q2<-q^2
expected<-c(p2,pq2,p2)
ecount<-expected*sum(gulf)
val<-((gulf-ecount)^2)/ecount
sum(val)
ecount
help.start()
require(ggplot2)
attach(diamands)
attach(diamonds)
qlot(price, data = diamonds, geo = "density", color = "cut")
qplot(price, data = diamonds, geo = "density", color = "cut")
qplot(cara,price,data=diamonds)
qplot(carat,price,data=diamonds)
qplot(carat,price,data=diamonds,geom= "heatmap"
)
qplot(carat,price,data=diamonds, color = blue)
qplot(carat,price,data=diamonds, color = "blue")
qplot(data, unemploy, data=economics)
log(1/2)
log(.5)
(-2/5)*log(2/5)
(-3/5)*log(3/5)
(-2/5)*log(2/5)+(-3/5)*log(3/5)
log(2/5)
-0.9162907*(-2/5)
log(2/5,base =2)
log(2/5,base =1)
log(2/5,base =3)
log(2/5,base =2)
-1.321928*(2/5)
-1.321928*(-2/5)
(-2/5)*log(2/5,base=2)+((-3/5)*log(3/5,base=2))
log(1,base=2)
2^0
log(0,base=2)
AA<- 100/350
Aa<- 150/350
aa<- 100/350
AA
aa
Aa
p<- AA + (.5*Aa)
q<- aa + (.5*Aa)
p
q
AA<- 20/100
Aa<- 35/100
aa<- 45/100
p<- AA + (.5*Aa)
q<- aa + (.5*Aa)
p
q
p^2
2*p*q
q^2
p^2+(2*p*q)=q^2
p^2+(2*p*q)+q^2
sqqrt(.81)
sqrt(.81)
.55^2
2*.55*.45
.45^2
0.3025+0.495+0.2025
.5^10
setwd(dir = "Desktop/Spring 2FALSETRUE6/Data Mining/Assignments/")
library(arules)
library(arulesViz)
library(arulesViz)
data <- paste(
"# this is some test data",
"M, O, N, K, E, Y",
"D, O, N, K, E, Y",
"M, A, K, E",
"M, U, C, K, Y",
"C, O, O, K, I, E",
sep="\n")
cat(data)
write(data, file = "demo_basket")
tr <- read.transactions("demo_basket", format = "basket", sep=",", skip = 1,  rm.duplicates = TRUE)
inspect(tr)
rules <- apriori(tr, parameter= list(supp=0.6, conf=0.8))
inspect(rules)
data
cat(data)
## read demo data (skip comment line)
tr <- read.transactions("demo_basket", format = "basket", sep=",", skip = 1,  rm.duplicates = TRUE)
inspect(tr)
rules <- apriori(tr, parameter= list(supp=0.6, conf=0.8))
inspect(rules)
install.packages('caret')
library('klar')
library('caret')
library('caret')
install.packages('pbkrtest')
install.packages("pbkrtest")
library('klar')
library('caret')
install.packages('klar')
install.packages('klaR')
library('klaR')
library('caret')
x = iris
x
setwd(dir='Desktop/Spring 2016/CS 7001/Project_1/part_1/EPM_Dataset/')
library(rpart)
library(tree)
library(party)
library(klaR)
library(caret)
library(reshape2)
######################
df<- read.csv('Data/output_data/merged.csv') # use the merged data/ be sure to change to the relevant path
df<-subset(df,select=-c(1,2,4,5)) # take out the dumb columns/ the columns that are not independent of the target
#df<-subset(df,select=-c(1,2,4,5,9)) # subset out time_delta feature
df<-na.omit(df) # omit na's from the file
df<-df[-df$idle_time < 5000,] # remove an extreme outlier in idle time
#df$session[df$session == 1] <- 'one' # ugly way of doing this/ also not necessary
df$session<-as.factor(df$session) # make sure that you factorize the target
######################################
sub<-sample(nrow(df),floor(nrow(df)*0.9)) # training data is 90% of all data (random rows)
train<- df[sub,] # define training data from the sub
test<- df[-sub,] # define the testing data from the rest
xTrain<- subset(train,select=-c(session)) # inputs
yTrain<- as.factor(train$session) # targets
xTest<- subset(test,select=-c(session))
yTest<- as.factor(test$session)
model <- train(xTrain,yTrain,'nb',trControl=trainControl(method='cv',number=10))
prop.table(table(predict(model$finalModel,xTest)$class,yTest))
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
## create the individual plots ##
p1<- ggplot(df, aes(factor(session),idle_time, colour = session))
p2<- ggplot(df, aes(factor(session),right_click, colour = session))
p3<- ggplot(df, aes(factor(session),left_click, colour = session))
p4<- ggplot(df, aes(factor(session),mouse_wheel, colour = session))
p5<- ggplot(df, aes(factor(session),mouse_movement, colour = session))
p6<- ggplot(df, aes(factor(session),keystroke, colour = session))
p7<- ggplot(df, aes(factor(session),time_delta, colour = session))
## boxplots ##
p1 + geom_boxplot() + theme(legend.position="none") +
labs(title = "idle time", x = "session", y = "")
model$pred
predict(model$finalModel,xTest)$class,yTest)
predict(model$finalModel,xTest)$class
preds<- predict(model$finalModel,xTest)$class
preds
reals<- yTest
rea;s
reals
cbind(preds,reals)
vals<-cbind(preds,reals)
vals
plot(vals$preds,vals$reals)
names(vals)
plot(preds,reals)
vals<-data.frame(vals)
vals
names(vals)
plot(vals$preds,vals$reals)
plot(df$left_click,vals$preds)
plot(test$left_click,vals$preds)
plot(test$idle_time,vals$preds)
plot(test$mouse_movement,vals$preds)
p14<- ggplot(df, aes(keystroke, colour = session)) + geom_density() + facet_wrap(~session)
p14
p8<- ggplot(df, aes(keystroke, colour = session))
p9<- ggplot(df, aes(idle_time, colour = session))
p10<- ggplot(df, aes(mouse_wheel, colour = session))
p11<- ggplot(df, aes(left_click, colour = session))
p12<- ggplot(df, aes(right_click, colour = session))
p13<- ggplot(df, aes(mouse_movement, colour = session))
## plot 2D density plots ##
p8 + geom_point() + geom_density() + facet_wrap(~session)
p9 + geom_point() + geom_density() + facet_wrap(~session)
p8 +  geom_density() + facet_wrap(~session)
p9 +  geom_density() + facet_wrap(~session)
p10 +  geom_density() + facet_wrap(~session)
p11 +  geom_density() + facet_wrap(~session)
p12 +  geom_density() + facet_wrap(~session)
p13 +  geom_density() + facet_wrap(~session)
pairs(df[2:5],pch=21,bg=c("red","green3","blue")[unclass(df$session)])
pairs(df[2:5],pch=21,bg=c("red","green3","blue","yellow","purple")[unclass(df$session)])
df2 <- read.csv('Data/output_data/final_grades.csv')
df2 <- subset(df2, select = -X ) # clean up residual index rows
df2
y <- as.factor(mround(df2$total,10))
mround <- function(x,base){
base*round(x/base)
}
y <- as.factor(mround(df2$total,10))
model <- train(x,y,'nb',trControl=trainControl(method='cv',number=10))
x <- subset(df2, select = -total) # define training set
y <- as.factor(mround(df2$total,10))
## train your model ##
model <- train(x,y,'nb',trControl=trainControl(method='cv',number=10))
summary(model)
model
fit <- rpart(total ~ ., df2)
summary(fit)
## plot decision tree ##
tr = tree(fit, data=df2)
summary(tr)
plot(tr); text(tr)
x <- subset(df2, select = c(es_6_1_25points,es_5_2_10points, es_4_1_15points,es_3_3_2points) ) # define training set
y <- as.factor(mround(df2$total,10))
## train your model ##
model <- train(x,y,'nb',trControl=trainControl(method='cv',number=10))
model
predict(model$finalModel,x)
predict(model$finalModel,x)$class
table(predict(model$finalModel,x)$class,y)
names(df)
mround <- function(x,base){
base*round(x/base)
}
## read in csv file ##
df2 <- read.csv('Data/output_data/final_grades.csv')
df2 <- subset(df2, select = -X ) # clean up residual index rows
df2 <- na.omit(df2)
x <- subset(df2, select = c(es_6_1_25points,es_5_2_10points, es_4_1_15points,es_3_3_2points) ) # define training set
y <- as.factor(mround(df2$total,10))
## train your model ##
model <- train(x,y,'nb',trControl=trainControl(method='cv',number=10))
predict(model$finalModel,x)
predict(model$finalModel,x)$class
table(predict(model$finalModel,x)$class,y)
model
model <- train(xTrain,yTrain,'nb',trControl=trainControl(method='cv',number=10))
model
prop.table(table(predict(model$finalModel,xTest)$class,yTest))
table(table(predict(model$finalModel,xTest)$class,yTest))
table(predict(model$finalModel,xTest)$class,yTest))
table(predict(model$finalModel,xTest)$class,yTest)
sub<-sample(nrow(df),floor(nrow(df)*0.5)) # training data is 90% of all data (random rows)
train<- df[sub,] # define training data from the sub
test<- df[-sub,] # define the testing data from the rest
xTrain<- subset(train,select=-c(session)) # inputs
yTrain<- as.factor(train$session) # targets
xTest<- subset(test,select=-c(session))
yTest<- as.factor(test$session)
######################
## train your model ##
######################
model <- train(xTrain,yTrain,'nb',trControl=trainControl(method='cv',number=10))
model
prop.table(table(predict(model$finalModel,xTest)$class,yTest))
table(predict(model$finalModel,xTest)$class,yTest)
p1<- ggplot(df, aes(factor(session),idle_time, colour = session))
p2<- ggplot(df, aes(factor(session),right_click, colour = session))
p3<- ggplot(df, aes(factor(session),left_click, colour = session))
p4<- ggplot(df, aes(factor(session),mouse_wheel, colour = session))
p5<- ggplot(df, aes(factor(session),mouse_movement, colour = session))
p6<- ggplot(df, aes(factor(session),keystroke, colour = session))
p7<- ggplot(df, aes(factor(session),time_delta, colour = session))
## boxplots ##
p1 + geom_boxplot() + theme(legend.position="none") +
labs(title = "idle time", x = "session", y = "")
p2 + geom_boxplot() + theme(legend.position="none") +
labs(title = "right click", x = "session", y = "")
p3 + geom_boxplot() + theme(legend.position="none") +
labs(title = "left click", x = "session", y = "")
p4 + geom_boxplot() + theme(legend.position="none") +
labs(title = "mouse wheel", x = "session", y = "")
p5 + geom_boxplot() + theme(legend.position="none") +
labs(title = "mouse movement", x = "session", y = "")
p6 + geom_boxplot() + theme(legend.position="none") +
labs(title = "keystroke", x = "session", y = "")
p7 + geom_boxplot() + theme(legend.position="none") +
labs(title = "time", x = "session", y = "")
## string plots together ##
multiplot(p1, p2, p3,p4,p5,p6,p7, cols=7)
multiplot(p1, p2, p3,p4,p5,p6,p7, cols=7)
p1 + geom_boxplot() + theme(legend.position="none") +
labs(title = "idle time", x = "session", y = "")
p2 + geom_boxplot() + theme(legend.position="none") +
labs(title = "right click", x = "session", y = "")
p3 + geom_boxplot() + theme(legend.position="none") +
labs(title = "left click", x = "session", y = "")
p4 + geom_boxplot() + theme(legend.position="none") +
labs(title = "mouse wheel", x = "session", y = "")
p5 + geom_boxplot() + theme(legend.position="none") +
labs(title = "mouse movement", x = "session", y = "")
p6 + geom_boxplot() + theme(legend.position="none") +
labs(title = "keystroke", x = "session", y = "")
p7 + geom_boxplot() + theme(legend.position="none") +
labs(title = "time", x = "session", y = "")
multiplot(p1, p2, p3,p4,p5,p6,p7, cols=7)
p1<- ggplot(df, aes(factor(session),idle_time, colour = session))
p2<- ggplot(df, aes(factor(session),right_click, colour = session))
p3<- ggplot(df, aes(factor(session),left_click, colour = session))
p4<- ggplot(df, aes(factor(session),mouse_wheel, colour = session))
p5<- ggplot(df, aes(factor(session),mouse_movement, colour = session))
p6<- ggplot(df, aes(factor(session),keystroke, colour = session))
p7<- ggplot(df, aes(factor(session),time_delta, colour = session))
p1 + geom_boxplot() + theme(legend.position="none") +
labs(title = "idle time", x = "session", y = "")
p2 + geom_boxplot() + theme(legend.position="none") +
labs(title = "right click", x = "session", y = "")
p3 + geom_boxplot() + theme(legend.position="none") +
labs(title = "left click", x = "session", y = "")
p4 + geom_boxplot() + theme(legend.position="none") +
labs(title = "mouse wheel", x = "session", y = "")
p5 + geom_boxplot() + theme(legend.position="none") +
labs(title = "mouse movement", x = "session", y = "")
p6 + geom_boxplot() + theme(legend.position="none") +
labs(title = "keystroke", x = "session", y = "")
p7 + geom_boxplot() + theme(legend.position="none") +
labs(title = "time", x = "session", y = "")
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(p1, p2, p3,p4,p5,p6,p7, cols=7)
Q
p1<-p1 + geom_boxplot() + theme(legend.position="none") +
labs(title = "idle time", x = "session", y = "")
p2<-p2 + geom_boxplot() + theme(legend.position="none") +
labs(title = "right click", x = "session", y = "")
p3<-p3 + geom_boxplot() + theme(legend.position="none") +
labs(title = "left click", x = "session", y = "")
p4<-p4 + geom_boxplot() + theme(legend.position="none") +
labs(title = "mouse wheel", x = "session", y = "")
p5<-p5 + geom_boxplot() + theme(legend.position="none") +
labs(title = "mouse movement", x = "session", y = "")
p6<-p6 + geom_boxplot() + theme(legend.position="none") +
labs(title = "keystroke", x = "session", y = "")
p7<-p7 + geom_boxplot() + theme(legend.position="none") +
labs(title = "time", x = "session", y = "")
multiplot(p1, p2, p3,p4,p5,p6,p7, cols=7)
2e+07
p1<-p1 + geom_boxplot() + theme(legend.position="none") +
labs(title = "idle time", x = "session", y = "") + coord_cartesian(ylim= 100)
p1
p1<-p1 + geom_boxplot() + theme(legend.position="none") +
labs(title = "idle time", x = "session", y = "") + coord_cartesian(ylim= c(0,100))
p1
labs(title = "idle time", x = "session", y = "") #+ coord_cartesian(ylim= c(0,100))
p1<-p1 + geom_boxplot() + theme(legend.position="none") +
labs(title = "idle time", x = "session", y = "") #+ coord_cartesian(ylim= c(0,100))
p1
p1<-p1 + geom_boxplot() + theme(legend.position="none") +
labs(title = "idle time", x = "session", y = "")
p1<- ggplot(df, aes(factor(session),idle_time, colour = session))
p1<-p1 + geom_boxplot() + theme(legend.position="none") +
labs(title = "idle time", x = "session", y = "") #+ coord_cartesian(ylim= c(0,100))
p1
summary(df$idle_time)
p1<- ggplot(df, aes(factor(session),idle_time, colour = session))
p1<-p1 + geom_boxplot() + theme(legend.position="none") +
labs(title = "idle time", x = "session", y = "") + coord_cartesian(ylim= c(18300,143400))
p1
p1<- ggplot(df, aes(factor(session),idle_time, colour = session))
p1<-p1 + geom_boxplot() + theme(legend.position="none") +
labs(title = "idle time", x = "session", y = "") + coord_cartesian(ylim= c(18300,1434000))
p1
p1<- ggplot(df, aes(factor(session),idle_time, colour = session))
p1<-p1 + geom_boxplot() + theme(legend.position="none") +
labs(title = "idle time", x = "session", y = "") + coord_cartesian(ylim= c(18300,2000000))
p1
p1<- ggplot(df, aes(factor(session),idle_time, colour = session))
p1<-p1 + geom_boxplot() + theme(legend.position="none") +
labs(title = "idle time", x = "session", y = "") + coord_cartesian(ylim= c(18300,20000000))
p1
p1<-p1 + geom_boxplot() + theme(legend.position="none") +
labs(title = "idle time", x = "session", y = "") + coord_cartesian(ylim= c(18300,15000000))
p1
p1<-p1 + geom_boxplot() + theme(legend.position="none") +
labs(title = "idle time", x = "session", y = "") + coord_cartesian(ylim= c(18300,10000000))
p1
p2
p3
p3<-p3 + geom_boxplot() + theme(legend.position="none") +
labs(title = "left click", x = "session", y = "") + coord_cartesian(ylim= c(0,25))
p3
p4
p4<-p4 + geom_boxplot() + theme(legend.position="none") +
labs(title = "mouse wheel", x = "session", y = "") + coord_cartesian(ylim= c(0,30))
p4
p4<- ggplot(df, aes(factor(session),mouse_wheel, colour = session))
p4<-p4 + geom_boxplot() + theme(legend.position="none") +
labs(title = "mouse wheel", x = "session", y = "") + coord_cartesian(ylim= c(-5,30))
p4
p5
p4<-p4 + geom_boxplot() + theme(legend.position="none") +
labs(title = "mouse wheel", x = "session", y = "") + coord_cartesian(ylim= c(0,30))
p4
p5
p5<-p5 + geom_boxplot() + theme(legend.position="none") +
labs(title = "mouse movement", x = "session", y = "") + coord_cartesian(ylim= c(0,1750))
p5
p5<-p5 + geom_boxplot() + theme(legend.position="none") +
labs(title = "mouse movement", x = "session", y = "") + coord_cartesian(ylim= c(0,1700))
p5
model$call
model$pred
model$dots
p6
p6<-p6 + geom_boxplot() + theme(legend.position="none") +
labs(title = "keystroke", x = "session", y = "") + coord_cartesian(ylim= c(0,40))
p6
p7
p7<-p7 + geom_boxplot() + theme(legend.position="none") +
labs(title = "time", x = "session", y = "") + coord_cartesian(ylim= c(0,90))
p7
multiplot(p1, p2, p3,p4,p5,p6,p7, cols=7)
multiplot(p6,p3,p7 ,p2, p1,p4,p5, cols=7)
pairs(df2[c('es_6_1_25points','es_5_2_10points', 'es_4_1_15points','es_3_3_2points'),],pch=21,bg=c("red","green3","blue","purple","purple")[unclass(df2$total)])
pairs(df2[c(,'es_6_1_25points','es_5_2_10points', 'es_4_1_15points','es_3_3_2points')],pch=21,bg=c("red","green3","blue","purple","purple")[unclass(df2$total)])
pairs(df2[,c('es_6_1_25points','es_5_2_10points', 'es_4_1_15points','es_3_3_2points')],pch=21,bg=c("red","green3","blue","purple","purple")[unclass(df2$total)])
pairs(df2[,c('es_6_1_25points','es_5_2_10points', 'es_4_1_15points','es_3_3_2points')],pch=21,bg=c("red","green3","blue","purple")[unclass(df2$total)])
library(ggplot2)
data(mtcars)
plotmatrix(mtcars[,1:3])
ggpairs(df2, columns=c('es_6_1_25points','es_5_2_10points', 'es_4_1_15points','es_3_3_2points'),
diag=list(continuous="density",   discrete="bar"), axisLabels="show")
require(GGally)
install.packages('GGally')
install.packages("GGally")
